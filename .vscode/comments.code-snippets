{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  // == Comments ==================================================================
  "Types Comment Break": {
    "prefix": "//types",
    "scope": "typescriptreact,typescript",
    "body": ["// == Types ================================================================"],
    "description": "Types comment"
  },
  "Function Comment Break": {
    "prefix": "//functions",
    "scope": "typescriptreact,typescript",
    "body": ["// == Functions ============================================================"],
    "description": "Functions comment"
  },
  "Hooks Comment Break": {
    "prefix": "//hooks",
    "scope": "typescriptreact",
    "body": ["// == Hooks ================================================================"],
    "description": "Hooks comment"
  },
  "Exports Comment Break": {
    "prefix": "//exports",
    "scope": "typescript, typescriptreact",
    "body": ["// == Exports =============================================================="],
    "description": "Exports comment"
  },
  "Constants Comment Break": {
    "prefix": "//constants",
    "scope": "typescriptreact,typescript",
    "body": ["// == Constants ============================================================"],
    "description": "Constants comment"
  },
  "Request Comment Break": {
    "prefix": "//request",
    "scope": "typescript",
    "body": ["// == Request =============================================================="],
    "description": "Constants comment"
  },
  "Component Comment Break": {
    "prefix": "//component",
    "scope": "typescriptreact",
    "body": ["// == Component ============================================================"],
    "description": "Component comment"
  },
  "Styles Comment Break": {
    "prefix": "//styles",
    "scope": "typescriptreact",
    "body": ["// == Styles ==============================================================="],
    "description": "Styles comment"
  },
  "Script Comment Break": {
    "prefix": "//script",
    "scope": "typescript",
    "body": ["// == Script ==============================================================="],
    "description": "Script comment"
  },
  "IProps interface": {
    "prefix": "iprops",
    "scope": "typescriptreact",
    "body": ["interface IProps {\n  $1\n}"],
    "description": "Props interface comment"
  },
}
